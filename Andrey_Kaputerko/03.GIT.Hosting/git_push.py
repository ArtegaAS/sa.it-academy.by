
import subprocess

import sys

def run_git_command(cmd, cwd=None):
    try:
        result = subprocess.run(cmd,
                              shell=True,
                              capture_output=True,
                              text=True,
                              cwd=cwd,
                              timeout=300)
        return result.returncode, result.stdout, result.stderr
    except subprocess.TimeoutExpired:
        return -1, "", "–¢–∞–π–º–∞—É—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã"
    except Exception as e:
        return -1, "", str(e)

def get_remotes():
    try:
        returncode, stdout, stderr = run_git_command("git remote")
        if returncode != 0:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ remote: {stderr}")
            return []

        remotes = [remote.strip() for remote in stdout.split('\n') if remote.strip()]
        return remotes
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
        return []

def git_push_to_remote(remote_name):
    print(f"üîÑ –í—ã–ø–æ–ª–Ω—è—é push –≤ {remote_name}...")

    returncode, stdout, stderr = run_git_command(f"git push {remote_name}")

    if returncode == 0:
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω push –≤ {remote_name}")
        if stdout.strip():
            print(f"   –í—ã–≤–æ–¥: {stdout.strip()}")
        return True
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ push –≤ {remote_name}:")
        if stderr.strip():
            print(f"   –û—à–∏–±–∫–∞: {stderr.strip()}")
        if stdout.strip():
            print(f"   –í—ã–≤–æ–¥: {stdout.strip()}")
        return False

def git_push_all_remotes():
    print("üîç –ü–æ–ª—É—á–∞—é —Å–ø–∏—Å–æ–∫ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤...")

    remotes = get_remotes()

    if not remotes:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è")
        print("   –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –≤ git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ –∏ –µ—Å—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ remote")
        return False

    print(f"üìã –ù–∞–π–¥–µ–Ω–æ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤: {len(remotes)}")
    for i, remote in enumerate(remotes, 1):
        print(f"   {i}. {remote}")

    print("\nüöÄ –ù–∞—á–∏–Ω–∞—é –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ push –≤–æ –≤—Å–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏...")

    success_count = 0
    failed_count = 0
    failed_remotes = []

    for remote in remotes:
        success = git_push_to_remote(remote)
        if success:
            success_count += 1
        else:
            failed_count += 1
            failed_remotes.append(remote)
        print()

    print("=" * 50)
    print("üìä –ò–¢–û–ì–ò:")
    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {success_count}")
    print(f"‚ùå –û—à–∏–±–∫–∏: {failed_count}")
    print(f"üìã –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {len(remotes)}")

    if failed_remotes:
        print(f"üìõ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ —Å –æ—à–∏–±–∫–∞–º–∏: {', '.join(failed_remotes)}")

    return failed_count == 0

def main():
    print("üêç Git Push All Remotes - –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è")
    print("=" * 50)

    returncode, _, stderr = run_git_command("git rev-parse --is-inside-work-tree")
    if returncode != 0:
        print("‚ùå –û—à–∏–±–∫–∞: —Ç–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ —è–≤–ª—è–µ—Ç—Å—è git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–º")
        print(f"   –î–µ—Ç–∞–ª–∏: {stderr}")
        sys.exit(1)

    returncode, current_branch, _ = run_git_command("git branch --show-current")
    if returncode == 0:
        print(f"üåø –¢–µ–∫—É—â–∞—è –≤–µ—Ç–∫–∞: {current_branch.strip()}")
    else:
        print("üåø –¢–µ–∫—É—â–∞—è –≤–µ—Ç–∫–∞: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞")

    print()

    success = git_push_all_remotes()

    if success:
        print("\nüéâ –í—Å–µ push –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        sys.exit(0)
    else:
        print("\nüí• –ë—ã–ª–∏ –æ—à–∏–±–∫–∏ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ push")
        sys.exit(1)

if __name__ == "__main__":
    main()

